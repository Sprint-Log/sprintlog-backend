[tool.poetry]
authors = ["Hexcode Technologies <info@hexcode.tech>"]
classifiers = [
    "Development Status :: 2 - Developing/Alpha",
    "Environment :: Web Environment",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Typing :: Typed",
]
description = "Opinionated template for integrating Litestar with a SPA"
documentation = "https://cofin.github.io/litestar-fullstack"
homepage = "https://github.com/cofin/litestar-fullstack"
include = [
  "CHANGELOG.md",
  "src/server/app/domain/web/public/**/*",
  "src/server/app/**/*.sql",
  "src/server/app/lib/db/**/*.ini",
]
keywords = ["api", "rest", "http", "asgi", "pydantic", "litestar", "fastapi", "framework", "websocket", "vite", "spa"]
license = "MIT"
maintainers = ["Hexcode Technologies <info@hexcode.tech>"]
name = "app"
packages = [{ include = "app", from = "src" }]
readme = "README.md"
repository = "https://github.com/sprint-log/sprintlog-backend"
version = "0.1.0"

[tool.poetry.scripts]
app = "litestar.__main__:run_cli"

[tool.poetry.plugins."litestar.commands"]
database = "app.cli:database_management_app"
run-all = "app.cli:run_all_app"
users = "app.cli:user_management_app"
worker = "app.cli:worker_management_app"

[tool.poetry.dependencies]
aiosql = "*"
asyncpg = "*"
greenlet = {version = ">=2.0.2", platform = "darwin"}
litestar = {version = "2.0.0rc1", extras = ["jwt", 'cli', 'redis', 'jinja', 'sqlalchemy', 'structlog', 'pydantic']}
passlib = {version = "*", extras = ["argon2"]}
pydantic-settings = "*"
python = ">=3.11,<3.12"
python-dotenv = "*"
saq = "*"
tenacity = "*"
sqlalchemy = ">=2.0.19"
uvicorn = { version = "*" , extras = ['standard']}
# litestar = {version = "*", extras = ["jwt", 'cli', 'redis', 'jinja2'], allow-prereleases = true}
black = "^23.7.0"
livekit-server-sdk-python = "^1.0.0"

[tool.poetry.group.dev.dependencies]
asgi-lifespan = "*"
coverage = { extras = ["toml"], version = "*" }
cython = "*"
# nodeenv = "*"
pytest = "*"
pytest-asyncio = "*"
pytest-cov = "*"
pytest-dotenv = "*"
pytest-mock = "*"
[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = "*"
mkdocs-material = "*"
mkdocstrings = "*"
mkdocstrings-python = "*"

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
asyncpg-stubs = "*"
black = "*"
blacken-docs = "*"
mypy = "1.4.1"
pre-commit = "*"
pylint = "*"
pylint-pydantic = "0.2.3"
slotscheck = "*"
types-click = "*"
types-passlib = "*"
types-python-jose = "*"
types-pyyaml = "*"
types-redis = "*"

[tool.poetry.build]
generate-setup-file = false
# script = "scripts/pre-build.py"

[build-system]
build-backend = "poetry.core.masonry.api"
# requires = ["poetry-core", "setuptools", "cython", "nodeenv"]
requires = ["poetry-core", "setuptools"]

[tool.black]
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | venv
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''
include = '\.pyi?$'
line-length = 120

[tool.coverage.report]
exclude_lines = [
    'if TYPE_CHECKING:',
    'pragma: no cover',
    "if __name__ == .__main__.:",
    'def __repr__',
    'if self\.debug:',
    'if settings\.DEBUG',
    'raise AssertionError',
    'raise NotImplementedError',
    'if 0:',
    'class .*\bProtocol\):',
    '@(abc\.)?abstractmethod',
]
omit = ["*/tests/*"]
show_missing = true
[tool.coverage.run]
branch = true
omit = ["tests/*", "**/*/migrations/**/*.py", "scripts/*"]

[tool.pytest.ini_options]
addopts = ["-ra", "--ignore", "migrations"]
asyncio_mode = "auto"
env_files = [".env.test"]
env_override_existing_values = 1
filterwarnings = [
    "ignore::DeprecationWarning:pkg_resources",
    "ignore::DeprecationWarning:google.*",
    "ignore::DeprecationWarning:passlib.*",
]
testpaths = ["tests"]

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    '__pycache__',
]
fix = true
ignore = [
    "E501",  # pycodestyle line too long, handled by black
    "D100",  # pydocstyle - missing docstring in public module
    "D101",  # pydocstyle - missing docstring in public class
    "D102",  # pydocstyle - missing docstring in public method
    "D103",  # pydocstyle - missing docstring in public function
    "D104",  # pydocstyle - missing docstring in public package
    "D105",  # pydocstyle - missing docstring in magic method
    "D106",  # pydocstyle - missing docstring in public nested class
    "D107",  # pydocstyle - missing docstring in __init__
    "D202",  # pydocstyle - no blank lines allowed after function docstring
    "D205",  # pydocstyle - 1 blank line required between summary line and description
    "D415",  # pydocstyle - first line should end with a period, question mark, or exclamation point
    "UP037", # pyupgrade - removes quotes from type annotation
    "A003",  # flake8-builtins - class attribute {name} is shadowing a python builtin
    "B010",  # flake8-bugbear - do not call setattr with a constant attribute value
    "B008",  #  flake8-bugbear - Do not perform function call `Parameter` in argument defaultsRuff(B008)

]
line-length = 120
select = [
    "A",   # flake8-builtins
    "B",   # flake8-bugbear
    "BLE", # flake8-blind-except
    "C4",  # flake8-comprehensions
    "C90", # mccabe
    "D",   # pydocstyle
    "DJ",  # flake8-django
    "DTZ", # flake8-datetimez
    "E",   # pycodestyle errors
    "ERA", # eradicate
    "EXE", # flake8-executable
    "F",   # pyflakes
    "G",   # flake8-logging-format
    "I",   # isort
    "ICN", # flake8-import-conventions
    "ISC", # flake8-implicit-str-concat
    "N",   # pep8-naming
    "PIE", # flake8-pie
    "PLC", # pylint - convention
    "PLE", # pylint - error
    "PLW", # pylint - warning
    "PTH", # flake8-use-pathlib
    "Q",   # flake8-quotes
    "RET", # flake8-return
    # "RUF", # Ruff-specific rules
    "S",   # flake8-bandit
    "SIM", # flake8-simplify
    "T10", # flake8-debugger
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP",  # pyupgrade
    "W",   # pycodestyle - warning
    "YTT", # flake8-2020
]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
src = ["src", "tests/"]
target-version = "py311"

[tool.slotscheck]
strict-imports = false

[tool.ruff.mccabe]
max-complexity = 12

[tool.ruff.pep8-naming]
classmethod-decorators = [
  "classmethod",
  "pydantic.validator",
  "pydantic.root_validator",
  "pydantic.field_validator",
  "sqlalchemy.ext.declarative.declared_attr",
  "sqlalchemy.orm.declared_attr.directive",
  "sqlalchemy.orm.declared_attr",
]

[tool.ruff.per-file-ignores]
"*/migrations/*.py" = ['D104', 'D103', 'D205', 'D212']
"__init__.py" = ['F401', 'D104']
"tests/*.py" = ['D103', 'S101', 'D104']

[tool.ruff.isort]
known-first-party = ['tests', 'app']

[tool.ruff.pydocstyle]
convention = "google"

[tool.codespell]
ignore-words-list = "alog"

[tool.mypy]
disallow_any_generics = false
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
exclude = '''(?x)(
^build/
|^dist/
|^.venv/
|^node_modules/
|^migrations/
)
'''
implicit_reexport = false
show_error_codes = true
strict = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true


[[tool.mypy.overrides]]
disallow_untyped_decorators = false
module = ["tests.*"]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["sqlalchemy.*", "saq.*", "uvicorn.*", "aiohttp.*", "jsbeautifier", "jsbeautifier.*"]

[[tool.mypy.overrides]]
ignore_errors = true
module = ["app.lib.db.migrations.*", "app.lib.dto.*"]

[tool.pyright]
include = ["src/app", "tests"]
