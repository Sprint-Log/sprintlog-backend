[tool.poetry]
name = "starlite-pg-redis-docker"
version = "0.1.0"
description = "An example Starlite application with Redis, Postgres and Docker"
authors = []
packages = [{include = "app" }]
license = "MIT"

[tool.poetry.dependencies]
python = "~=3.11.0"
aiosmtplib = "*"
alembic = "*"
asyncpg = "*"
httpx = "*"
pydantic = "*"
python-dotenv = "*"
redis = "*"
saq = "*"
sentry-sdk = "*"
sqlalchemy = ">=2.0.0"
# litestar = { path = "../litestar", extras = ["redis", "jwt", "cli"], develop = true }
#litestar = { version = "==2.0.0a5" , extras = ["redis", "jwt","cli","sqlalchemy"] }
litestar = { git = "https://github.com/v3ss0n/litestar.git", branch = "fqn-random-dtoid",  extras = ["redis", "cli"] }

uvloop = "*"

[tool.poetry.group.testing]
optional = true

[tool.poetry.group.testing.dependencies]
pytest = "*"
pytest-asyncio = "*"
pytest-dotenv = "*"
# litestar = { path = "../litestar", extras = ["testing"], develop = true}
#litestar = { version = "==2.0.0a5" , extras = ["redis", "cli"] }
litestar = { git = "https://github.com/v3ss0n/litestar.git", branch = "fqn-random-dtoid",  extras = ["redis", "cli"] }

[tool.poetry.group.coverage]
optional = true

[tool.poetry.group.coverage.dependencies]
pytest-cov = "*"

[tool.poetry.group.integration]
optional = true

[tool.poetry.group.integration.dependencies]
pytest-docker = "*"
docker-compose = "*"

[tool.poetry.group.linting]
optional = true

[tool.poetry.group.linting.dependencies]
pre-commit = "*"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.coverage.report]
show_missing = true
exclude_lines = [
    'if TYPE_CHECKING:',
    'pragma: no cover',
    "if __name__ == '__main__':",
]

[tool.coverage.run]
omit = ["tests/*"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
env_files = [".env.example"]
testpaths = ["tests/unit"]

[tool.ruff]
select = [
    "A", # flake8-builtins
    "B", # flake8-bugbear
    "BLE", # flake8-blind-except
    "C4", # flake8-comprehensions
    "C90", # mccabe
    "D", # pydocstyle
    "DJ", # flake8-django
    "DTZ", # flake8-datetimez
    "E", # pycodestyle errors
    "ERA", # eradicate
    "EXE", # flake8-executable
    "F", # pyflakes
    "G", # flake8-logging-format
    "I", # isort
    "ICN", # flake8-import-conventions
    "ISC", # flake8-implicit-str-concat
    "N", # pep8-naming
    "PIE", # flake8-pie
    "PLC", # pylint - convention
    "PLE", # pylint - error
    "PLW", # pylint - warning
    "PTH", # flake8-use-pathlib
    "Q", # flake8-quotes
    "RET", # flake8-return
    "RUF", # Ruff-specific rules
    "S", # flake8-bandit
    "SIM", # flake8-simplify
    "T10", # flake8-debugger
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP", # pyupgrade
    "W", # pycodestyle - warning
    "YTT", # flake8-2020
]
ignore = [
    "E501", # pycodestyle line too long, handled by black
    "D100", # pydocstyle - missing docstring in public module
    "D101", # pydocstyle - missing docstring in public class
    "D102", # pydocstyle - missing docstring in public method
    "D103", # pydocstyle - missing docstring in public function
    "D104", # pydocstyle - missing docstring in public package
    "D105", # pydocstyle - missing docstring in magic method
    "D106", # pydocstyle - missing docstring in public nested class
    "D107", # pydocstyle - missing docstring in __init__
    "D202", # pydocstyle - no blank lines allowed after function docstring
    "D205", # pydocstyle - 1 blank line required between summary line and description
    "D415", # pydocstyle - first line should end with a period, question mark, or exclamation point
    "A003", # flake8-builtins - class attribute {name} is shadowing a python builtin
    "B010" # flake8-bugbear - do not call setattr with a constant attribute value
]
line-length = 100
src = ["src", "tests"]
target-version = "py311"

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.isort]
known-first-party = ["app", "tests"]

[tool.ruff.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "sqlalchemy.orm.declared_attr.directive",
]

[tool.ruff.per-file-ignores]
"examples/tests/**/*.*" = ["S101"]
"app/lib/dependencies.py" = ["B008"]
"tests/**/*.*" = ["S101", "DTZ"]
