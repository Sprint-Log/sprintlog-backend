[tool.poetry]
authors = ["Cody Fincher <cody.fincher@gmail.com>"]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Web Environment",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python",
  "Topic :: Internet :: WWW/HTTP",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development",
  "Typing :: Typed",
]
description = "Opinionated template for integrating Litestar with a SPA"
documentation = "https://litestar-org.github.io/litestar-fullstack"
homepage = "https://github.com/litestar-org/litestar-fullstack"
include = [
  "CHANGELOG.md",
  "src/server/app/domain/web/public/**/*",
  "src/server/app/**/*.sql",
  "src/server/app/lib/db/**/*.ini",
]
keywords = ["api", "asgi", "litestar", "vite", "spa"]
license = "MIT"
maintainers = ["Cody Fincher <cody.fincher@gmail.com>"]
name = "app"
packages = [{include = "app", from = "src"}]
readme = "README.md"
repository = "https://github.com/litestar-org/litestar-fullstack"
version = "0.1.0"

[tool.poetry.scripts]
app = "litestar.__main__:run_cli"

[tool.poetry.plugins."litestar.commands"]
run-all = "app.cli:run_all_app"
users = "app.cli:user_management_app"
worker = "app.cli:worker_management_app"

[tool.poetry.dependencies]
advanced-alchemy = "^0.2.2"
aiosql = "*"
asyncpg = "*"
greenlet = {version = ">=2.0.1", platform = "darwin"}
litestar = {version = ">=2.1.1", extras = ["jwt", 'cli', 'redis', 'jinja', 'structlog', 'pydantic']}
passlib = {version = "*", extras = ["argon2"]}
pydantic-settings = "*"
python = ">=3.11,<3.12"
python-dotenv = "*"
saq = "*"
uvicorn = {version = "*", extras = ['standard']}
livekit-server-sdk-python = "^1.0.0"

[tool.poetry.group.dev.dependencies]
asgi-lifespan = "*"
coverage = {extras = ["toml"], version = "*"}
cython = "*"
nodeenv = "*"
pytest = "*"
pytest-asyncio = "*"
pytest-cov = "*"
pytest-dotenv = "*"
pytest-mock = "*"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = "*"
mkdocs-material = "*"
mkdocstrings = "*"
mkdocstrings-python = "*"

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
asyncpg-stubs = "*"
black = "*"
blacken-docs = "*"
mypy = "*"
pre-commit = "*"
pylint = "*"
pylint-pydantic = "*"
ruff = '*'
slotscheck = "*"
types-click = "*"
types-passlib = "*"
types-python-jose = "*"
types-pyyaml = "*"
types-redis = "*"

[tool.poetry.build]
generate-setup-file = false

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core", "setuptools", "cython", "nodeenv"]

[tool.black]
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | venv
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''
include = '\.pyi?$'
line-length = 120

[tool.coverage.report]
exclude_lines = [
  'if TYPE_CHECKING:',
  'pragma: no cover',
  "if __name__ == .__main__.:",
  'def __repr__',
  'if self\.debug:',
  'if settings\.DEBUG',
  'raise AssertionError',
  'raise NotImplementedError',
  'if 0:',
  'class .*\bProtocol\):',
  '@(abc\.)?abstractmethod',
]
omit = ["*/tests/*"]
show_missing = true
[tool.coverage.run]
branch = true
omit = ["tests/*", "**/*/migrations/**/*.py", "scripts/*"]

[tool.pytest.ini_options]
addopts = ["-ra", "--ignore", "migrations"]
asyncio_mode = "auto"
env_files = [".env.testing"]
env_override_existing_values = 1
filterwarnings = [
  "ignore::DeprecationWarning:pkg_resources",
  "ignore::DeprecationWarning:google.*",
  "ignore::DeprecationWarning:passlib.*",
  "ignore::DeprecationWarning:aiosql.*",
]
testpaths = ["tests"]

[tool.ruff]
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  '__pycache__',
  "src/app/lib/db/migrations/versions/*.py",
]
fix = true
ignore = [
  "E501", # pycodestyle line too long, handled by black
  "D100", # pydocstyle - missing docstring in public module
  "D101", # pydocstyle - missing docstring in public class
  "D102", # pydocstyle - missing docstring in public method
  "D103", # pydocstyle - missing docstring in public function
  "D104", # pydocstyle - missing docstring in public package
  "D105", # pydocstyle - missing docstring in magic method
  "D106", # pydocstyle - missing docstring in public nested class
  "D107", # pydocstyle - missing docstring in __init__
  "D202", # pydocstyle - no blank lines allowed after function docstring
  "D205", # pydocstyle - 1 blank line required between summary line and description
  "D415", # pydocstyle - first line should end with a period, question mark, or exclamation point
  "UP037", # pyupgrade - removes quotes from type annotation
  "A003", # flake8-builtins - class attribute {name} is shadowing a python builtin
  "B010", # flake8-bugbear - do not call setattr with a constant attribute value
  "B008", #  flake8-bugbear - Do not perform function call `Parameter` in argument defaultsRuff(B008)
  "RUF012", # ruff - mutable class attributes should be annotated with `typing.ClassVar`
  "ANN401", # ruff - Dynamically typed expressions (typing.Any) are disallowed
  "ANN102",
  "ANN101", # ruff - Missing type annotation for `self` in method
  "PLR0913", # ruff - Too many arguments to function call
  "PLR2004", # Magic value used in comparison
  "FBT001", # Boolean typed positional argument in function definition
  "FBT002", # Boolean default positional argument in function definition
  "FBT003", # Boolean Boolean default positional argument in function definition
  "ARG002", # Unused method argument
  "ARG001", #  Unused function argument
  "TD002",
  "TD003",
  "FIX002",
  "PGH003",
  "RUF006",
  "SLF001",
  "PT007",
  'PT004',
  'PT005',
  'S603',
]
line-length = 120
select = ["ALL"]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
src = ["src", "tests/"]
target-version = "py311"

[tool.slotscheck]
strict-imports = false

[tool.ruff.mccabe]
max-complexity = 12

[tool.ruff.pep8-naming]
classmethod-decorators = [
  "classmethod",
  "pydantic.validator",
  "pydantic.root_validator",
  "pydantic.field_validator",
  "sqlalchemy.ext.declarative.declared_attr",
  "sqlalchemy.orm.declared_attr.directive",
  "sqlalchemy.orm.declared_attr",
]

[tool.ruff.per-file-ignores]
"*/migrations/*.py" = ['D104', 'D103', 'D205', 'D212']
"__init__.py" = ['F401', 'D104']
"scripts/*.py" = ["INP001"]
"src/app/lib/db/migrations/versions/*.py" = ["ANN201", "INP001"]
"tests/*.py" = ['D103', 'S101', 'D104']

[tool.ruff.isort]
known-first-party = ['tests', 'app']

[tool.ruff.pydocstyle]
convention = "google"

[tool.codespell]
ignore-words-list = "alog"

[tool.mypy]
disallow_any_generics = false
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
exclude = '''(?x)(
^build/
|^dist/
|^.venv/
|^node_modules/
|^migrations/
)
'''
implicit_reexport = false
show_error_codes = true
strict = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true


[[tool.mypy.overrides]]
disallow_untyped_decorators = false
module = ["tests.*"]

[[tool.mypy.overrides]]
disallow_untyped_calls = false
disallow_untyped_decorators = false
module = ["aisoql.*"]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["sqlalchemy.*", "saq.*", "uvicorn.*", "aiohttp.*", "jsbeautifier", "jsbeautifier.*", "re2.*", "uvloop", "uvloop.*"]

[[tool.mypy.overrides]]
ignore_errors = true
module = ["app.lib.db.migrations.*", "app.lib.dto.*"]

[tool.pyright]
include = ["src/app", "tests"]
